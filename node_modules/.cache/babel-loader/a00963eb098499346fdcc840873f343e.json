{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/workspace/agile_telecine/src/components/SeasonsMenu.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tab from '@material-ui/core/Tab';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport SeasonList from './SeasonList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  appBar: {\n    width: '500px',\n    marginTop: '200px',\n    height: '500px',\n    backgroundColor: \"rgba(50,50,50,0.7)\"\n  }\n});\nexport default function SeasonsMenu(props) {\n  _s();\n\n  const {\n    episodes\n  } = props;\n  const [value, setValue] = useState(1);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const filterSeason = episodes.filter(item => {\n    return item.SeasonNumber === value;\n  });\n  const episodesFilter = episodes.map(item => item.SeasonNumber);\n  const numberSeason = episodesFilter.filter((item, index) => episodesFilter.indexOf(item) === index);\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(TabContext, {\n      value: value,\n      children: /*#__PURE__*/_jsxDEV(AppBar, {\n        className: classes.appBar,\n        children: [/*#__PURE__*/_jsxDEV(TabList, {\n          indicatorColor: \"primary\",\n          onChange: handleChange,\n          \"aria-label\": \"simple tabs\",\n          children: numberSeason.map((item, key) => /*#__PURE__*/_jsxDEV(Tab, {\n            label: `T${item}`,\n            value: item\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n          value: value,\n          children: /*#__PURE__*/_jsxDEV(SeasonList, {\n            data: filterSeason\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SeasonsMenu, \"/XExBJ/wVDOeaN4XqcURxmub304=\", false, function () {\n  return [useStyles];\n});\n\n_c = SeasonsMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeasonsMenu\");","map":{"version":3,"sources":["/Users/rafa/Documents/workspace/agile_telecine/src/components/SeasonsMenu.jsx"],"names":["React","useState","makeStyles","AppBar","Tab","TabContext","TabList","TabPanel","SeasonList","useStyles","root","flexGrow","appBar","width","marginTop","height","backgroundColor","SeasonsMenu","props","episodes","value","setValue","handleChange","event","newValue","filterSeason","filter","item","SeasonNumber","episodesFilter","map","numberSeason","index","indexOf","classes","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC;AAC3BQ,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADqB;AAI3BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,OADD;AAENC,IAAAA,SAAS,EAAE,OAFL;AAGNC,IAAAA,MAAM,EAAE,OAHF;AAINC,IAAAA,eAAe,EAAE;AAJX;AAJmB,CAAD,CAA5B;AAYA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AAEA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMqB,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxCH,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGN,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAS;AAAE,WAAOA,IAAI,CAACC,YAAL,KAAsBR,KAA7B;AAAmC,GAA9D,CAArB;AACA,QAAMS,cAAc,GAAGV,QAAQ,CAACW,GAAT,CAAcH,IAAD,IAAQA,IAAI,CAACC,YAA1B,CAAvB;AACA,QAAMG,YAAY,GAAIF,cAAc,CAACH,MAAf,CAAsB,CAACC,IAAD,EAAOK,KAAP,KAAeH,cAAc,CAACI,OAAf,CAAuBN,IAAvB,MAAiCK,KAAtE,CAAtB;AAEA,QAAME,OAAO,GAAGzB,SAAS,EAAzB;AACA,sBACE;AAAK,IAAA,SAAS,EAAEyB,OAAO,CAACxB,IAAxB;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEU,KAAnB;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAEc,OAAO,CAACtB,MAA3B;AAAA,gCACE,QAAC,OAAD;AAAS,UAAA,cAAc,EAAC,SAAxB;AAAkC,UAAA,QAAQ,EAAEU,YAA5C;AAA0D,wBAAW,aAArE;AAAA,oBACGS,YAAY,CAACD,GAAb,CAAiB,CAACH,IAAD,EAAOQ,GAAP,kBAChB,QAAC,GAAD;AAAgB,YAAA,KAAK,EAAG,IAAGR,IAAK,EAAhC;AAAmC,YAAA,KAAK,EAAEA;AAA1C,aAAWQ,GAAX;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAMI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEf,KAAjB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAEK;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA9BuBR,W;UAaNR,S;;;KAbMQ,W","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tab from '@material-ui/core/Tab';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport SeasonList from './SeasonList';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  appBar: {\n    width: '500px',\n    marginTop: '200px',\n    height: '500px',\n    backgroundColor: \"rgba(50,50,50,0.7)\",\n  },\n});\n\nexport default function SeasonsMenu(props) {\n  const { episodes } = props;\n  \n  const [value, setValue] = useState(1);\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  \n  const filterSeason = episodes.filter((item)=> { return item.SeasonNumber === value})\n  const episodesFilter = episodes.map((item)=>item.SeasonNumber);\n  const numberSeason =  episodesFilter.filter((item, index)=>episodesFilter.indexOf(item) === index);\n  \n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <TabContext value={value}>\n        <AppBar className={classes.appBar}>\n          <TabList indicatorColor=\"primary\" onChange={handleChange} aria-label=\"simple tabs\">\n            {numberSeason.map((item, key)=> \n              <Tab  key={key} label={`T${item}`} value={item} /> \n            )}\n          </TabList>\n            <TabPanel value={value}>\n              <SeasonList data={filterSeason}/>\n            </TabPanel>\n        </AppBar>\n      </TabContext>\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}